## this file describe how we build libs
ROOT?=.
## third-party lib
$(TABIX_INC) $(TABIX_LIB):
	(cd $(ROOT)/third; $(MAKE) tabix)
$(EIGEN_INC) $(EIGEN_LIB):
	(cd $(ROOT)/third; $(MAKE) eigen)
$(PCRE_INC) $(PCRE_LIB):
	(cd $(ROOT)/third; $(MAKE) pcre)
$(GSL_INC) $(GSL_LIB):
	(cd $(ROOT)/third; $(MAKE) gsl)

$(BZIP2_INC) $(BZIP2_LIB):
	(cd $(ROOT)/third; $(MAKE) bzip2)

$(BCF_INC) $(BCF_LIB) $(SAMTOOLS_INC) $(SAMTOOLS_LIB):
	(cd $(ROOT)/third; $(MAKE)  samtools)   

## our libs
$(BASE_LIB):
	(cd $(ROOT)/base; $(MAKE) )
$(BASE_LIB_DBG):
	(cd $(ROOT)/base; $(MAKE) debug)
$(VCF_LIB):
	(cd $(ROOT)/libVcf; $(MAKE) )
$(VCF_LIB_DBG):
	(cd $(ROOT)/libVcf; $(MAKE) debug)
$(REGRESSION_LIB): $(EIGEN_INC)
	(cd $(ROOT)/regression; $(MAKE) )
$(REGRESSION_LIB_DBG):
	(cd $(ROOT)/regression; $(MAKE) debug)
$(GONCALO_LIB):
	(cd $(ROOT)/libsrc; $(MAKE) )
$(GONCALO_LIB_DBG):
	(cd $(ROOT)/libsrc; $(MAKE) debug)

## rule to make lib
# to build lib, we will use reverse order
# so third party lib is build first.
reverse = $(if $(1),$(call reverse,$(wordlist 2,$(words $(1)),$(1)))) $(firstword $(1))
LIBS:=$(call reverse,$(LIB))
LIBS_DBG:=$(call reverse,$(LIB_DBG))

.PHONY: lib lib-dbg
lib:$(LIBS)
lib-dbg:$(LIB_DBG)

